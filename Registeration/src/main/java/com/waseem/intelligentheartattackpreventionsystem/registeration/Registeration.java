package com.waseem.intelligentheartattackpreventionsystem.registeration;import android.app.Activity;import android.app.Dialog;import android.os.Handler;import android.os.Bundle;import android.telephony.SmsManager;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import java.util.regex.Matcher;import java.util.regex.Pattern;public class Registeration extends Activity{	EditText patient_name,patient_number ,doctor_name,doctor_number, belong_nam, belong_number, password, confirm_password;	Button Register;	Spinner spinner_patient,spinner_doctor,spinner_belong;	String phone_no;	ArrayAdapter patientAdapter,doctorAdapter,belongAdapter;	final Handler myHandler=new Handler();	String patient_code,doctor_code,belong_code;	public Pattern pattern;	public Matcher matcher;	public static final String PASSWORD_PATTERN = "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})";	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.activity_registeration);		pattern = Pattern.compile(PASSWORD_PATTERN);		patient_name = (EditText) findViewById(R.id.patient_name);		patient_number=(EditText)findViewById(R.id.patient_no);		doctor_name = (EditText) findViewById(R.id.doctor_name);		doctor_number=(EditText) findViewById(R.id.doctor_no);		belong_nam = (EditText) findViewById(R.id.belong_name);		belong_number=(EditText)findViewById(R.id.belong_no);		password = (EditText) findViewById(R.id.password);		confirm_password = (EditText) findViewById(R.id.conform_password);		spinner_patient =(Spinner)findViewById(R.id.patient_code);		patientAdapter=ArrayAdapter.createFromResource(this,R.array.connection_code,R.layout.spinner_custom);		spinner_patient.setAdapter(patientAdapter);		spinner_patient.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {			@Override			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {				patient_code =Integer.parseInt(parent.getItemAtPosition(position).toString())+"";				//Toast.makeText(Registeration.this,connection_code,Toast.LENGTH_SHORT).show();			}			@Override			public void onNothingSelected(AdapterView<?> parent) {			}		});		spinner_doctor=(Spinner)findViewById(R.id.doctor_code);		doctorAdapter=ArrayAdapter.createFromResource(this,R.array.connection_code,R.layout.spinner_custom);		spinner_doctor.setAdapter(doctorAdapter);		spinner_doctor.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {			@Override			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {				doctor_code =Integer.parseInt(parent.getItemAtPosition(position).toString())+"";				//Toast.makeText(Registeration.this,connection_code,Toast.LENGTH_SHORT).show();			}			@Override			public void onNothingSelected(AdapterView<?> parent) {			}		});		spinner_belong=(Spinner)findViewById(R.id.belong_code);		belongAdapter=ArrayAdapter.createFromResource(this,R.array.connection_code,R.layout.spinner_custom);		spinner_belong.setAdapter(belongAdapter);		spinner_belong.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {			@Override			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {				belong_code =Integer.parseInt(parent.getItemAtPosition(position).toString())+"";				//Toast.makeText(Registeration.this,connection_code,Toast.LENGTH_SHORT).show();			}			@Override			public void onNothingSelected(AdapterView<?> parent) {			}		});		Register = (Button) findViewById(R.id.Register_button);		Register.setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				final Runnable myUpdateResults = new Runnable() {					public void run() {						final String p_name,p_number, d_name,d_number, b_name ,b_number, p_password;						Boolean sucess=true;						if((patient_name.getText().toString().replaceAll("\\s","").length())>1){							p_name=patient_name.getText().toString().replaceAll("\\s","");						}						else {							Toast.makeText(Registeration.this, "First name Must contains Atleast 3 charachers", Toast.LENGTH_SHORT).show();							p_name=null;						}						if(patient_number.getText().toString().replaceAll("\\s","").length()==7){							p_number="+92"+ patient_code +patient_number.getText().toString().replaceAll("\\s","");							phone_no = p_number;							try {								SmsManager smsManager = SmsManager.getDefault();								smsManager.sendTextMessage(phone_no, null,"Dear "+p_name+", "+										" Thankyou for using IHAPS we are here for your care !!! \n " +										"Please Enter the following code to validate \n"+phone_no.hashCode()										, null, null);								Toast.makeText(getApplicationContext(), "SMS Sent!", Toast.LENGTH_LONG).show();							} catch (Exception e) {								Toast.makeText(getApplicationContext(),										"SMS failed, please try again later!",										Toast.LENGTH_LONG).show();								e.printStackTrace();							}						}else{							Toast.makeText(Registeration.this,"Belong person Contact number is Invalid",Toast.LENGTH_SHORT).show();							p_number=null;						}						if((doctor_name.getText().toString().replaceAll("\\s","").length())>1){							d_name=doctor_name.getText().toString().replaceAll("\\s","");						}else {							Toast.makeText(Registeration.this, "Last name Must contains Atleast 3 charachers", Toast.LENGTH_SHORT).show();							d_name=null;						}						if(doctor_number.getText().toString().replaceAll("\\s","").length()==7){							d_number="+92"+ doctor_code +doctor_number.getText().toString().replaceAll("\\s","");						}else{							Toast.makeText(Registeration.this,"Belong person Contact number is Invalid",Toast.LENGTH_SHORT).show();							d_number=null;						}						if((belong_nam.getText().toString().replaceAll("\\s","").length())>3){							b_name=belong_nam.getText().toString().replaceAll("\\s","");						}						else{							Toast.makeText(Registeration.this,"Belong person name Must contains Atleast 3 charachers",Toast.LENGTH_SHORT).show();							b_name=null;						}						if(belong_number.getText().toString().replaceAll("\\s","").length()==7){							b_number="+92"+ belong_code +belong_number.getText().toString().replaceAll("\\s","");						}else{							Toast.makeText(Registeration.this,"Belong person Contact number is Invalid",Toast.LENGTH_SHORT).show();							b_number=null;						}						//if(Conform_Password()==true){						if(password.getText().toString()!=null){							p_password=password.getText().toString();						}						else{							p_password=null;							Toast.makeText(Registeration.this, "Password Error", Toast.LENGTH_SHORT).show();						}						Dialog d=new Dialog(Registeration.this);						d.setTitle("Database Update");						TextView tv=new TextView(Registeration.this);						if((p_name==null)||(d_name==null)|| (p_password==null) || (b_name==null) ||( b_number==null )){							tv.setText("DataBase could not be updated");							d.setContentView(tv);							d.show();						}						else {							try {								DataBaseClass db_class = new DataBaseClass(Registeration.this);								db_class.open();								db_class.Create_Entry(p_name,p_number,d_name,d_number, b_name, b_number, p_password);								db_class.Signal_Learning("68,61,89,55,74,12,6,13,10,13","Normal");								db_class.Signal_Learning("68,63,87,55,74,9,4,9,10,8","Running");								db_class.Signal_Learning("68,63,86,55,74,12,6,13,10,13","Sleeping");								db_class.Close();							} catch (Exception e) {								tv.setText(e.toString());								d.setContentView(tv);								d.show();								sucess = false;							} finally {								if (sucess) {									tv.setText("DataBase updated Successfully");									d.setContentView(tv);									d.show();								}							}						}					}				};				new Thread(){					public void run(){						myHandler.post(myUpdateResults);					}				}.start();			}		});	}	public Boolean Conform_Password() {		if (password.getText().toString().equals(confirm_password.getText().toString())) {			if (validate(password.getText().toString()) == true) {				//Toast.makeText(Registeration.this, "Password Match", Toast.LENGTH_SHORT).show();				return true;			} else {				Toast.makeText(Registeration.this, "Password Must Contain UpperCase,LowerCase,Numbers and Special Characters", Toast.LENGTH_LONG).show();				password.setText("");				confirm_password.setText("");				return false;			}		} else {			Toast.makeText(this, "Password Does not Match Re-entering may fix the problem ", Toast.LENGTH_SHORT).show();			password.setText("");			confirm_password.setText("");			return false;		}	}	public boolean validate(final String password) {		matcher = pattern.matcher(password);		return matcher.matches();	}}